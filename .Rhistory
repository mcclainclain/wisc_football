return (data)
}
get_player_stats(623993, "hitting")$stats$splits
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))
return (data)
}
get_player_stats(623993, "hitting")$stats$splits$stat
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))
return (data)
}
get_player_stats(623993, "hitting")$stats$splits
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))
return (data)
}
get_player_stats(623993, "hitting")$stats$splits[[1]]
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))
return (data)
}
get_player_stats(623993, "hitting")$stats$splits[[1]]$stat
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))$stats$splits[[1]]$stat
return (data)
}
get_player_stats(623993, "hitting")
View(wbc_players)
View(wbc_player_info)
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))$stats$splits[[1]]$stat
return (data)
}
get_player_stats(664747, "pitching")
View(wbc_player_info)
hitters = wbc_player_info %>% filter(primaryPosition$type == "Pitcher")
View(hitters)
hitters = wbc_player_info %>% filter(primaryPosition$type != "Pitcher")
View(hitters)
hitters = wbc_player_info %>% filter(primaryPosition$type != "Pitcher")
pitchers = wbc_player_info %>% filter(primaryPosition$type == "Pitcher")
View(pitchers)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(httr)
library(jsonlite)
library(scraEP)
wbc_players = read_csv("wbc_rosters.csv")
wbc_players[3,1] = "Luis Robert Jr." # Luis Robert is officially named Luis Robert Jr.
players_to_remove = c("Edwin Díaz", "Rob Kaminsky", "Elieser Hernández") # Players to remove rows for, as they have yet to play in 2023
wbc_players = wbc_players %>%
filter(!Player %in% players_to_remove)
# API call
res = GET("https://statsapi.mlb.com/api/v1/sports/1/players", query=list(season=2023))
all_players = fromJSON(rawToChar(res$content))$people
wbc_players_no_accents = lapply(wbc_players$Player, unaccent) # list of players w/o accents, to find disparities between wiki and mlb
wbc_player_info = all_players %>%
filter(fullName %in% wbc_players$Player | fullName %in% wbc_players_no_accents)
# Sort each list alphabetically by first name, for simplicity
wbc_players = wbc_players[order(wbc_players$Player),]
wbc_player_info = wbc_player_info[order(wbc_player_info$fullName),]
wbc_player_info$wbcCountry = wbc_players$Country
# Function to call mlb api and get player stats (based on hitter or pitcher)
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))$stats$splits[[1]]$stat
return (data)
}
hitters = wbc_player_info %>% filter(primaryPosition$type != "Pitcher")
pitchers = wbc_player_info %>% filter(primaryPosition$type == "Pitcher")
View(hitters)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(httr)
library(jsonlite)
library(scraEP)
wbc_players = read_csv("wbc_rosters.csv")
wbc_players[3,1] = "Luis Robert Jr." # Luis Robert is officially named Luis Robert Jr.
players_to_remove = c("Edwin Díaz", "Rob Kaminsky", "Elieser Hernández") # Players to remove rows for, as they have yet to play in 2023
wbc_players = wbc_players %>%
filter(!Player %in% players_to_remove)
# API call
res = GET("https://statsapi.mlb.com/api/v1/sports/1/players", query=list(season=2023))
all_players = fromJSON(rawToChar(res$content))$people
wbc_players_no_accents = lapply(wbc_players$Player, unaccent) # list of players w/o accents, to find disparities between wiki and mlb
wbc_player_info = all_players %>%
filter(fullName %in% wbc_players$Player | fullName %in% wbc_players_no_accents)
# Sort each list alphabetically by first name, for simplicity
wbc_players = wbc_players[order(wbc_players$Player),]
wbc_player_info = wbc_player_info[order(wbc_player_info$fullName),]
wbc_player_info$wbcCountry = wbc_players$Country
# Function to call mlb api and get player stats (based on hitter or pitcher)
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))$stats$splits[[1]]$stat
return (data)
}
hitters = wbc_player_info %>% filter(primaryPosition$type != "Pitcher")
pitchers = wbc_player_info %>% filter(primaryPosition$type == "Pitcher")
View(hitters)
View(pitchers)
View(hitters)
get_player_stats(623993, "hitting")
# Function to call mlb api and get player stats (based on hitter or pitcher)
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))$stats$splits[[1]]$stat
data = data %>%
select(gamesPlayed, runs, doubles, homeRuns, strikeOuts, baseOnBalls, hits, avg, atBats, obp, slg, ops, caughtStealing, stolenBases, stolenBasePercentage, plateAppearances, rbi, babip, groundOutsToAirouts, atBatsPerHomeRun)
return (data)
}
get_player_stats(623993, "hitting")
# Function to call mlb api and get player stats (based on hitter or pitcher)
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))$stats$splits[[1]]$stat
if (pos_type == "hitting"){
data = data %>%
select(gamesPlayed, runs, doubles, homeRuns, strikeOuts, baseOnBalls, hits, avg, atBats, obp, slg,ops, caughtStealing, stolenBases, stolenBasePercentage, plateAppearances, rbi, babip, groundOutsToAirouts, atBatsPerHomeRun)
}
else {
}
return (data)
}
View(pitchers)
View(pitchers)
get_player_stats(664747, "hitting")
get_player_stats(664747, "pitching")
# Function to call mlb api and get player stats (based on hitter or pitcher)
get_player_stats = function(id, pos_type, season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))$stats$splits[[1]]$stat
if (pos_type == "hitting"){
data = data %>%
select(gamesPlayed, runs, doubles, homeRuns, strikeOuts, baseOnBalls, hits, avg, atBats, obp, slg,ops, caughtStealing, stolenBases, stolenBasePercentage, plateAppearances, rbi, babip, groundOutsToAirouts, atBatsPerHomeRun)
}
else {
data = data %>%
select(gamesPlayed, gamesStarted, runs, homeRuns, strikeOuts, baseOnBalls, hits, hitByPitch, avg, obp, slg, ops, groundIntoDoublePlay, era, inningsPitched, wins, losses, saves, saveOpportunities, holds, blownSaves, earnedRuns, whip, completeGames, shutouts, pitchesPerInning, strikeoutsPer9Inn, walksPer9Inn, hitsPer9Inn, homeRunsPer9, inheritedRunnersScored)
}
return (data)
}
get_player_stats(664747, "pitching")
# Function to call mlb api and get player stats (based on hitter or pitcher)
get_player_stats = function(id, pos_type=c("hitting", "pitching"), season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))$stats$splits[[1]]$stat
if (pos_type == "hitting"){
data = data %>%
select(gamesPlayed, runs, doubles, homeRuns, strikeOuts, baseOnBalls, hits, avg, atBats, obp, slg,ops, caughtStealing, stolenBases, stolenBasePercentage, plateAppearances, rbi, babip, groundOutsToAirouts, atBatsPerHomeRun)
}
else {
data = data %>%
select(gamesPlayed, gamesStarted, runs, homeRuns, strikeOuts, baseOnBalls, hits, hitByPitch, avg, obp, slg, ops, groundIntoDoublePlay, era, inningsPitched, wins, losses, saves, saveOpportunities, holds, blownSaves, earnedRuns, whip, completeGames, shutouts, pitchesPerInning, strikeoutsPer9Inn, walksPer9Inn, hitsPer9Inn, homeRunsPer9, inheritedRunnersScored)
}
return (data)
}
get_player_stats(623993)
View(hitters)
get_player_stats(623993, "hitting")
get_player_stats(623993, "hitting")
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
if (i==1){
print(stats)
}
}
View(hitters)
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
hitter_stats = rbind(hitter_stats, stats)
}
View(hitter_stats)
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
print(len(stats))
hitter_stats = rbind(hitter_stats, stats)
}
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
print(length(stats))
hitter_stats = rbind(hitter_stats, stats)
}
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
print(nrow(stats))
hitter_stats = rbind(hitter_stats, stats)
}
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
if (nrow(stats) > 1){
View(stats)
}
hitter_stats = rbind(hitter_stats, stats)
}
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
if (nrow(stats) > 1){
print(stats)
}
hitter_stats = rbind(hitter_stats, stats)
}
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
if (nrow(stats) > 1){
print(hitters$id[i])
print(stats)
}
hitter_stats = rbind(hitter_stats, stats)
}
View(hitters)
hitters[1,]
# Function to call mlb api and get player stats (based on hitter or pitcher)
get_player_stats = function(id, pos_type=c("hitting", "pitching"), season=2023){
BASE_URL = "https://statsapi.mlb.com/api/v1/people/"
API_URL = paste0(BASE_URL, id, "/stats")
result = GET(API_URL, query=list(stats="season", group=pos_type, season=season))
data = fromJSON(rawToChar(result$content))$stats$splits[[1]]$stat
if (pos_type == "hitting"){
data = data %>%
select(gamesPlayed, runs, doubles, homeRuns, strikeOuts, baseOnBalls, hits, avg, atBats, obp, slg,ops, caughtStealing, stolenBases, stolenBasePercentage, plateAppearances, rbi, babip, groundOutsToAirouts, atBatsPerHomeRun)
}
else {
data = data %>%
select(gamesPlayed, gamesStarted, runs, homeRuns, strikeOuts, baseOnBalls, hits, hitByPitch, avg, obp, slg, ops, groundIntoDoublePlay, era, inningsPitched, wins, losses, saves, saveOpportunities, holds, blownSaves, earnedRuns, whip, completeGames, shutouts, pitchesPerInning, strikeoutsPer9Inn, walksPer9Inn, hitsPer9Inn, homeRunsPer9, inheritedRunnersScored)
}
# If player has multiple splits, that means they may have switched teams midseason. In this case, the first split is the full season split.
if (nrow(data) > 1) {
data = data[1,]
}
return (data)
}
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
if (nrow(stats) > 1){
print(hitters$id[i])
print(stats)
}
hitter_stats = rbind(hitter_stats, stats)
}
View(hitter_stats)
hitter_stats = data.frame()
for (i in 1:length(hitters$id)){
stats = get_player_stats(hitters$id[i], "hitting")
hitter_stats = rbind(hitter_stats, stats)
}
pitcher_stats = data.frame()
for (i in 1:length(pitchers$id)){
stats = get_player_stats(pitchers$id[i], "pitching")
pitcher_stats = rbind(pitcher_stats, stats)
}
View(hitter_stats)
View(pitcher_stats)
help.start()
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
setwd("~/Personal/projects/current/wisc_football")
players = read_csv("players.csv")
players = read_csv("players.csv")
players
players = read_csv("players.csv")
View(players)
duplicated(players[,1:2])
players
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
players
players %>%
count(Name)
players %>%
count(num_entries = Name)
players %>%
count(Name)
install.packages(sqldf)
install.packages("sqldf")
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
library(sqldf)
sqldf
players
sqldf("SELECT * FROM players")
sqldf("SELECT * FROM playersd")
sqldf("SELECT * FROM players")
sqldf("SELECT Name, COUNT(Name) as YearsPlayed FROM players GROUP BY Name")
sqldf("SELECT Name, MIN(YEAR) as FirstYear, MAX(YEAR) as LastYear FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, MIN(YEAR) as FirstYear, MAX(YEAR) as LastYear FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, CAST(MIN(YEAR) as varchar(5)) + '-' + CAST(MAX(YEAR) as varchar(5)) AS OnTeam FROM players GROUP BY Name")
sqldf("SELECT players.Name, players.Pos, players.Hometown")
player_years = sqldf("SELECT Name, CAST(MIN(YEAR) as varchar(5)) + '-' + CAST(MAX(YEAR) as varchar(5)) AS OnTeam FROM players GROUP BY Name")
player_years
player_years = sqldf("SELECT Name, MIN(YEAR) + '-' + MAX(YEAR) AS OnTeam FROM players GROUP BY Name")
player_years
player_years = sqldf("SELECT Name, MIN(YEAR) + '-' + MAX(YEAR) AS OnTeam FROM players GROUP BY Name")
player_years
player_years = sqldf("SELECT Name, STR(MIN(YEAR)) + '-' + STR(MAX(YEAR)) AS OnTeam FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, MIN(YEAR) + '-' + MAX(YEAR) AS OnTeam FROM players GROUP BY Name")
player_years
player_years = sqldf("SELECT Name, CONCAT(MIN(YEAR), "-", MAX(YEAR)) AS OnTeam FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, CONCAT(CAST(MIN(YEAR) AS VARCHAR), "-", CAST(MAX(YEAR) AS VARCHAR) AS OnTeam FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, CONCAT(CAST(MIN(YEAR) AS VARCHAR), "-", CAST(MAX(YEAR) AS VARCHAR) AS OnTeam FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, CONCAT(CAST(MIN(YEAR) AS VARCHAR), "-", CAST(MAX(YEAR) AS VARCHAR)) AS OnTeam FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, CONCAT(CAST(MIN(YEAR) AS VARCHAR), "-", CAST(MAX(YEAR) AS VARCHAR)) AS OnTeam FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, CONCAT(CAST(MIN(YEAR) AS VARCHAR), "-", CAST(MAX(YEAR) AS VARCHAR)) AS OnTeam FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, (CAST(MIN(YEAR) AS VARCHAR) + "-" + CAST(MAX(YEAR) AS VARCHAR)) AS OnTeam FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, (CAST(MIN(YEAR) AS VARCHAR) + "-" + CAST(MAX(YEAR) AS VARCHAR)) AS OnTeam FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, (CAST(MIN(YEAR) AS VARCHAR) + '-' + CAST(MAX(YEAR) AS VARCHAR)) AS OnTeam FROM players GROUP BY Name")
player_years
View(player_years)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
player_years
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
players = sqldf("SELECT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
players = sqldf("SELECT DISTINCT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
players = sqldf("SELECT (DISTINCT players.Name), players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players = sqldf("SELECT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT DISTINCT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT DISTINCT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name" WHERE player.Name='Riley Nowakowski')
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT DISTINCT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name WHERE player.Name='Riley Nowakowski'")
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT DISTINCT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name WHERE players.Name='Riley Nowakowski'")
players
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT DISTINCT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name WHERE players.Name='Braelon Allen'")
players
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT DISTINCT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name WHERE players.Name='Braelon Allen'")
players
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT DISTINCT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players
players = read_csv("players.csv") %>% select(Name, Pos, Hometown, Year)
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players GROUP BY Name")
players = sqldf("SELECT DISTINCT players.Name, players.Pos, players.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players LEFT JOIN player_years ON players.Name=player_years.Name")
players %>%
filter(Name == "Riley Nowakowksi")
players %>%
filter(Name == "Riley Nowakowksi")
View(players)
players %>%
filter(Name == "Riley Nowakowkski")
players %>%
filter(Name == "Riley Nowakowski")
install.packages('lemon')
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
library(sqldf)
library(lemon)
knit_print.data.frame <- lemon_print
players %>%
filter(Name == "Riley Nowakowski")
players %>%
filter(Name == "Riley Nowakowski")
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
library(sqldf)
library(lemon)
library(kableExtra)
rn = players %>%
filter(Name == "Riley Nowakowski")
kableExtra(rn)
players %>%
filter(Name == "Riley Nowakowski") %>%
kableExtra()
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl()
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_material(c("striped", "hover"))
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_material(c("striped", "hover"), full_width=F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_material(c("striped", "hover"), full_width=FALSE)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_paper(bootstrap_options = "striped", full_width = F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_classic(bootstrap_options = "striped", full_width = F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_classic2(bootstrap_options = "striped", full_width = F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_classic_2(bootstrap_options = "striped", full_width = F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_material(bootstrap_options = "striped", full_width = F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_minimal(bootstrap_options = "striped", full_width = F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_classic(bootstrap_options = "striped", full_width = F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_classic_2(bootstrap_options = "striped", full_width = F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_classic_2(bootstrap_options = c("striped", "hover"), full_width = F)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_classic_2(bootstrap_options = c("striped", "hover"), full_width = F, font_size=9)
players %>%
filter(Name == "Riley Nowakowski") %>%
kbl() %>%
kable_classic_2(bootstrap_options = c("striped", "hover"), full_width = F, font_size=20)
players
sqldf("SELECT Name, SUM(Pos) as Pos, Hometown, FirstYear, LastYear FROM players GROUP BY Name")
sqldf("SELECT Name, COUNT(Pos) as Pos, Hometown, FirstYear, LastYear FROM players GROUP BY Name")
